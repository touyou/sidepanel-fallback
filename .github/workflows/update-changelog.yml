name: Update CHANGELOG on PR merge

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  update-changelog:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get PR information
        id: pr-info
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_AUTHOR="${{ github.event.pull_request.user.login }}"
            PR_BODY="${{ github.event.pull_request.body }}"
          else
            # For push events, try to find the most recent merged PR
            COMMIT_SHA="${{ github.sha }}"
            PR_INFO=$(gh pr list --state merged --limit 1 --json number,title,author,body --jq '.[0]')
            if [ "$PR_INFO" != "null" ] && [ "$PR_INFO" != "" ]; then
              PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
              PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
              PR_AUTHOR=$(echo "$PR_INFO" | jq -r '.author.login')
              PR_BODY=$(echo "$PR_INFO" | jq -r '.body // ""')
            else
              # Fallback to commit information
              PR_NUMBER=""
              PR_TITLE="${{ github.event.head_commit.message }}"
              PR_AUTHOR="${{ github.event.head_commit.author.username }}"
              PR_BODY=""
            fi
          fi
          
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_OUTPUT
          echo "PR_BODY=$PR_BODY" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine change type and section
        id: change-type
        run: |
          PR_TITLE="${{ steps.pr-info.outputs.PR_TITLE }}"
          PR_BODY="${{ steps.pr-info.outputs.PR_BODY }}"
          
          # Determine the type of change based on conventional commits or PR title/body
          SECTION="Changed"
          
          if echo "$PR_TITLE" | grep -iE "^(feat|feature)"; then
            SECTION="Added"
          elif echo "$PR_TITLE" | grep -iE "^(fix|bugfix)"; then
            SECTION="Fixed"
          elif echo "$PR_TITLE" | grep -iE "^(docs|doc)"; then
            SECTION="Changed"
          elif echo "$PR_TITLE" | grep -iE "^(refactor|style|perf)"; then
            SECTION="Changed"
          elif echo "$PR_TITLE" | grep -iE "^(remove|delete)"; then
            SECTION="Removed"
          elif echo "$PR_BODY" | grep -iE "(breaking change|breaking:)"; then
            SECTION="Changed"
          fi
          
          # Check PR body for explicit section markers
          if echo "$PR_BODY" | grep -iE "changelog:\s*(added|add)"; then
            SECTION="Added"
          elif echo "$PR_BODY" | grep -iE "changelog:\s*(fixed|fix)"; then
            SECTION="Fixed"
          elif echo "$PR_BODY" | grep -iE "changelog:\s*(changed|change)"; then
            SECTION="Changed"
          elif echo "$PR_BODY" | grep -iE "changelog:\s*(removed|remove)"; then
            SECTION="Removed"
          fi
          
          echo "SECTION=$SECTION" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        run: |
          PR_NUMBER="${{ steps.pr-info.outputs.PR_NUMBER }}"
          PR_TITLE="${{ steps.pr-info.outputs.PR_TITLE }}"
          PR_AUTHOR="${{ steps.pr-info.outputs.PR_AUTHOR }}"
          SECTION="${{ steps.change-type.outputs.SECTION }}"
          
          # Create the changelog entry
          if [ -n "$PR_NUMBER" ]; then
            ENTRY="- $PR_TITLE (#$PR_NUMBER) @$PR_AUTHOR"
          else
            ENTRY="- $PR_TITLE @$PR_AUTHOR"
          fi
          
          # Backup original CHANGELOG
          cp CHANGELOG.md CHANGELOG.md.bak
          
          # Find the line number of the target section under [Unreleased]
          UNRELEASED_LINE=$(grep -n "## \[Unreleased\]" CHANGELOG.md | head -1 | cut -d: -f1)
          SECTION_LINE=$(awk -v start="$UNRELEASED_LINE" -v section="$SECTION" '
            NR > start && /^### / {
              if ($0 ~ "### " section) {
                print NR
                exit
              }
            }
          ' CHANGELOG.md)
          
          if [ -n "$SECTION_LINE" ]; then
            # Add entry after the section header
            sed -i "${SECTION_LINE}a\\${ENTRY}" CHANGELOG.md
          else
            echo "Warning: Could not find section '$SECTION' in CHANGELOG.md"
            # Fallback: add to Changed section or create it
            CHANGED_LINE=$(awk -v start="$UNRELEASED_LINE" '
              NR > start && /^### Changed/ {
                print NR
                exit
              }
            ' CHANGELOG.md)
            
            if [ -n "$CHANGED_LINE" ]; then
              sed -i "${CHANGED_LINE}a\\${ENTRY}" CHANGELOG.md
            else
              # Add Changed section if it doesn't exist
              sed -i "${UNRELEASED_LINE}a\\\\n### Changed\\n\\n${ENTRY}" CHANGELOG.md
            fi
          fi

      - name: Check if CHANGELOG was modified
        id: changelog-check
        run: |
          if ! diff -q CHANGELOG.md CHANGELOG.md.bak > /dev/null; then
            echo "MODIFIED=true" >> $GITHUB_OUTPUT
          else
            echo "MODIFIED=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit CHANGELOG updates
        if: steps.changelog-check.outputs.MODIFIED == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG for PR #${{ steps.pr-info.outputs.PR_NUMBER }}"
          git push